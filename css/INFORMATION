export GITHUB_USERNAME=MaximSurovtsev
export GITHUB_TOKEN=5e9849dc5e8cba2dfee3fbaa9303662ee3111472
5e9849dc5e8cba2dfee3fbaa9303662ee3111472

void reverse(Node * head) {
	
	
		if (head == nullptr) return;

		Node *prev = nullptr, *current = nullptr, *next = nullptr;
		current = head;
		while (current != nullptr){
			next = current->next;
			current->next = prev;
			prev = current;
			current = next;
		}
		
		head = prev;
		
}

template <typename Iterator, typename T>
auto find_two_elements_with_sum(Iterator first, Iterator last, T c)
->std::pair<bool, std::pair<Iterator, Iterator>>
{
	std::pair<bool, std::pair<Iterator, Iterator>> my_pair;
	std::pair<Iterator, Iterator> iter;
	--last;
	while (first != last && last != nullptr) {
		if (c == *first + *last) {
			my_pair.first = true;
			iter.first = first;
			iter.second = last;
			my_pair.second = iter;
			return my_pair;
		} else if ((*first + *last) < c) {
			first++;
			}
			else {
				last--;
			}
	}

	return my_pair;

}

template <typename Iterator1, typename Iterator2>
auto merge(Iterator1 first1, Iterator1 last1, Iterator1 first2, Iterator1 last2, Iterator2 output)->Iterator2 {

	while (first1 != last1 && first2 != last2) {
		output = first1 > first2 ? first2 : first1;

		if(output == first1) {
			++first1 ;
		}
		else {
			++first2;
		}
		++output;
	}
	while (first1 != last1) {
		output = first1;
		++first1;
		++output;
	}
	while (first2 != last2) {
		output = first2;
		++first2;
		++output;
	}
	Iterator2 result = ++output;
	return result;
}